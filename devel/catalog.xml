<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='../resources/catalog.xsl'?>
<c:catalog xmlns="http://zero-install.sourceforge.net/2004/injector/interface" xmlns:c="http://0install.de/schema/injector/catalog"><interface uri="https://apps.0install.net/devel/bc.xml"><name>Bc</name><summary xml:lang="en">Bc: arbitrary precision calculator language</summary><description xml:lang="en">bc is an arbitrary precision numeric processing language. Syntax is similar to C, but differs in many substantial areas. It supports interactive execution of statements. bc is a language that supports arbitrary precision numbers with interactive execution of statements. There are some similarities in the syntax to the C programming language. A standard math library is available by command line option. If requested, the math library is defined before processing any files. bc starts by processing code from all the files listed on the command line in the order listed. After all files have been processed, bc reads from the standard input. All code is executed as it is read. (If a file contains a command to halt the processor, bc will never read from the standard input.) </description><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.png" type="image/png"/><category>System</category><homepage>http://gnuwin32.sourceforge.net/packages/bc.htm</homepage><entry-point binary-name="bc" command="run">
    <needs-terminal/>
    <summary xml:lang="en">An arbitrary precision calculator language</summary>
    <description xml:lang="en">bc  is a language that supports arbitrary precision num-
       bers with interactive execution  of  statements.   There
       are some similarities in the syntax to the C programming
       language.  A standard math library is available by  com-
       mand  line  option.   If  requested, the math library is
       defined before processing any files.  bc starts by  pro-
       cessing  code  from  all the files listed on the command
       line in the order listed.  After  all  files  have  been
       processed,  bc  reads from the standard input.  All code
       is executed as it is read.  (If a file contains  a  com-
       mand  to halt the processor, bc will never read from the
       standard input.)

       This version of bc contains  several  extensions  beyond
       traditional bc implementations and the POSIX draft stan-
       dard.  Command line options can cause  these  extensions
       to  print  a  warning  or to be rejected.  This document
       describes  the  language  accepted  by  this  processor.
       Extensions will be identified as such.</description>
  </entry-point><entry-point binary-name="dc" command="dc">
    <needs-terminal/>
    <name xml:lang="en">Dc</name>
    <summary xml:lang="en">a reverse-polish arbitrary precision calculator</summary>
    <description xml:lang="en">Dc is a reverse-polish desk  calculator  which  supports
       unlimited  precision  arithmetic.  It also allows you to
       define and call macros.   Normally  dc  reads  from  the
       standard  input;  if  any command arguments are given to
       it, they are filenames, and dc reads  and  executes  the
       contents  of  the  files  before  reading  from standard
       input.  All normal output is  to  standard  output;  all
       error output is to standard error.

       A  reverse-polish  calculator stores numbers on a stack.
       Entering a number pushes it on  the  stack.   Arithmetic
       operations  pop  arguments  off  the  stack and push the
       results.

       To enter a  number  in  dc,  type  the  digits  with  an
       optional  decimal  point.   Exponential  notation is not
       supported.  To enter a negative number, begin the number
       with  ``_''.   ``-'' cannot be used for this, as it is a
       binary operator for subtraction instead.  To  enter  two
       numbers in succession, separate them with spaces or new-
       lines.  These have no meaning as commands.</description>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/cmake.xml"><name>CMake</name><summary>cross platform make</summary><description>CMake is a family of tools designed to build, test and package software. CMake is
used to control the software compilation process using simple platform and
compiler independent configuration files. CMake generates native makefiles and
workspaces that can be used in the compiler environment of your choice.</description><homepage>http://www.cmake.org/</homepage><category>Development</category><icon href="https://raw.githubusercontent.com/0install/apps/master/devel/cmake.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/devel/cmake.png" type="image/png"/><entry-point binary-name="cmake" command="run">
    <needs-terminal/>
    <name>CMake command-line</name>
  </entry-point><entry-point binary-name="cmake-gui" command="run-gui">
    <name>CMake GUI</name>
  </entry-point><entry-point binary-name="ccmake" command="run-curses">
    <needs-terminal/>
    <name>CMake Curses Interface</name>
  </entry-point><entry-point binary-name="cpack" command="cpack">
    <needs-terminal/>
    <name>CMake Packaging driver</name>
  </entry-point><entry-point binary-name="ctest" command="ctest">
    <needs-terminal/>
    <name>CMake Testing driver</name>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/doxygen.xml"><name>Doxygen</name><summary>generate documentation from source code</summary><homepage>http://www.doxygen.nl/</homepage><entry-point binary-name="doxygen" command="run"/><entry-point binary-name="doxyindexer" command="doxyindexer">
    <needs-terminal/>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/flex.xml"><name>Flex</name><summary xml:lang="en">Flex: fast lexical analyzer generator</summary><description xml:lang="en">Flex is a fast lexical analyser generator. It is a tool for generating programs that perform pattern-matching on text. There are many applications for Flex, including writing compilers in conjunction with GNU Bison. Flex is a free implementation of the well known Lex program. It features a Lex compatibility mode, and also provides several new features such as exclusive start conditions. </description><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.png" type="image/png"/><category>Development</category><homepage>http://gnuwin32.sourceforge.net/packages/flex.htm</homepage><entry-point binary-name="flex" command="run"/><entry-point binary-name="flex++" command="flex++">
    <needs-terminal/>
    <name xml:lang="en">Flex</name>
    <summary xml:lang="en">Flex: fast lexical analyzer generator</summary>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/freetype.xml"><name>FreeType</name><summary xml:lang="en">FreeType: font engine and rasterizer </summary><description xml:lang="en">FreeType is a software font engine that is designed to be small, efficient, highly customizable and portable while capable of producing high-quality output (glyph images). It can be used in graphics libraries, display servers, font conversion tools, text image generation tools, and many other products as well. 
Note that FreeType is a font service and doesn't provide APIs to perform higher-level features, like text layout or graphics processing (e.g. colored text rendering, &quot;hollowing&quot;, etc.). However, it greatly simplifies these tasks by providing a simple, easy to use and uniform interface to access the content of font files. 
•FreeType1 is in freetype-1.0 
•FreeType2 is in freetype-1.1 / 1.4 
•FreeType6 is in freetype-2.0.1 and higher 
</description><icon href="https://raw.githubusercontent.com/0install/apps/master/devel/freetype.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/devel/freetype.png" type="image/png"/><category>Development</category><homepage>http://gnuwin32.sourceforge.net/packages/freetype.htm</homepage><entry-point binary-name="ftview" command="run">
    <needs-terminal/>
    <name xml:lang="en">ftview</name>
    <summary xml:lang="en">Ftview: FreeType simple glyph viewer </summary>
  </entry-point><entry-point binary-name="ftbench" command="ftbench">
    <needs-terminal/>
    <name xml:lang="en">Ftbench</name>
    <summary xml:lang="en">Ftbench: bench some common FreeType paths </summary>
  </entry-point><entry-point binary-name="ftchkwd" command="ftchkwd">
    <needs-terminal/>
    <name xml:lang="en">Ftchkwd</name>
    <summary xml:lang="en">Ftchkwd: FreeType test fixed font width </summary>
  </entry-point><entry-point binary-name="ftdiff" command="ftdiff">
    <needs-terminal/>
    <name xml:lang="en">Ftdiff</name>
    <summary xml:lang="en">Ftdiff: FreeType proof several text hinting modes</summary>
  </entry-point><entry-point binary-name="ftdump" command="ftdump">
    <needs-terminal/>
    <name xml:lang="en">Ftdump</name>
    <summary xml:lang="en">Ftdump: FreeType simple font dumper </summary>
  </entry-point><entry-point binary-name="ftgamma" command="ftgamma">
    <needs-terminal/>
    <name xml:lang="en">Ftgamma</name>
    <summary xml:lang="en">Ftgamma: FreeType gamma matcher </summary>
  </entry-point><entry-point binary-name="ftgrid" command="ftgrid">
    <needs-terminal/>
    <name xml:lang="en">Ftgrid</name>
    <summary xml:lang="en">Ftgrid: font engine and rasterizer</summary>
  </entry-point><entry-point binary-name="ftlint" command="ftlint">
    <needs-terminal/>
    <name xml:lang="en">Ftlint</name>
    <summary xml:lang="en">Ftlint: FreeType simple font tester </summary>
  </entry-point><entry-point binary-name="ftmemchk" command="ftmemchk">
    <needs-terminal/>
    <name xml:lang="en">Ftmemchk</name>
    <summary xml:lang="en">Ftmemchk: FreeType simple memory tester </summary>
  </entry-point><entry-point binary-name="ftmulti" command="ftmulti">
    <needs-terminal/>
    <name xml:lang="en">Ftmulti</name>
    <summary xml:lang="en">Ftmulti: FreeType multiple masters font viewer </summary>
  </entry-point><entry-point binary-name="ftpatchk" command="ftpatchk">
    <needs-terminal/>
    <name xml:lang="en">Ftpatchk</name>
    <summary xml:lang="en">Ftpatchk: FreeType test whether patented hinting is necessary</summary>
  </entry-point><entry-point binary-name="ftstring" command="ftstring">
    <needs-terminal/>
    <name xml:lang="en">Ftstring</name>
    <summary xml:lang="en">Ftstring: FreeType string viewer </summary>
  </entry-point><entry-point binary-name="fttimer" command="fttimer">
    <needs-terminal/>
    <name xml:lang="en">Fttimer</name>
    <summary xml:lang="en">Fttimer: FreeType simple performance timer </summary>
  </entry-point><entry-point binary-name="ftvalid" command="ftvalid">
    <needs-terminal/>
    <name xml:lang="en">Ftvalid</name>
    <summary xml:lang="en">Ftvalid: FreeType layout table validator </summary>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/gettext.xml"><name>GetText</name><summary xml:lang="en">GetText: library and tools for native language support</summary><description xml:lang="en">A well integrated set of tools and documentation to help programmers, translators, and users make other GNU packages produce multi-lingual messages. The tools include a set of conventions about how programs should be written to support message catalogs, a directory and file naming organzation for those message catalogs, a runtime library that supports retrieval of translated messages, and a few stand-alone programs to manipulate sets of strings. A special GNU Emacs mode also helps work with these strings. 

Libintl is a library that provides native language support to programs. It is part of Gettext. 
•LibIntl-1 is in Gettext-0.10-.. 
•LibIntl-2 is in Libintl-0.11-.. 
•LibIntl-3 is in LibIntl-0.14-.. and in Gettext-0.14-.. 
</description><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.png" type="image/png"/><category>Development</category><homepage>http://gnuwin32.sourceforge.net/packages/gettext.htm</homepage><entry-point binary-name="gettext" command="run">
    <needs-terminal/>
    <name xml:lang="en">gettext</name>
    <summary xml:lang="en">translate message</summary>
    <description xml:lang="en">The  gettext  program translates a natural language mes-
       sage into the user's language, by looking up the  trans-
       lation in a message catalog.</description>
  </entry-point><entry-point binary-name="envsubst" command="envsubst">
    <needs-terminal/>
    <name xml:lang="en">envsubst</name>
    <summary xml:lang="en">substitutes  environment variables in shell</summary>
    <description xml:lang="en">Substitutes the values of environment variables.</description>
  </entry-point><entry-point binary-name="hostname" command="hostname">
    <needs-terminal/>
    <summary xml:lang="en">Print the machine's hostname.</summary>
  </entry-point><entry-point binary-name="msgattrib" command="msgattrib">
    <needs-terminal/>
    <summary xml:lang="en">Filters the messages of a translation catalog according to their attributes,</summary>
  </entry-point><entry-point binary-name="msgcat" command="msgcat">
    <needs-terminal/>
    <summary xml:lang="en">Concatenates and merges the specified PO files.</summary>
    <description xml:lang="en">By using the --more-than option, greater commonality may be requested
before messages are printed.  Conversely, the --less-than option may be
used to specify less commonality before messages are printed (i.e.
--less-than=2 will only print the unique messages).  Translations,
comments and extract comments will be cumulated, except that if --use-first
is specified, they will be taken from the first PO file to define them.
File positions from all PO files will be cumulated.</description>
  </entry-point><entry-point binary-name="msgcmp" command="msgcmp">
    <needs-terminal/>
    <summary xml:lang="en">Compare two Uniforum style .po files to check that both contain the same</summary>
    <description xml:lang="en">The def.po file is an existing PO file with the
translations.  The ref.pot file is the last created PO file, or a PO Template
file (generally created by xgettext).  This is useful for checking that
you have translated each and every message in your program.  Where an exact
match cannot be found, fuzzy matching is used to produce better diagnostics.</description>
  </entry-point><entry-point binary-name="msgcomm" command="msgcomm">
    <needs-terminal/>
    <summary xml:lang="en">Find messages which are common to two or more of the specified PO files.</summary>
    <description xml:lang="en">By using the --more-than option, greater commonality may be requested
before messages are printed.  Conversely, the --less-than option may be
used to specify less commonality before messages are printed (i.e.
--less-than=2 will only print the unique messages).  Translations,
comments and extract comments will be preserved, but only from the first
PO file to define them.  File positions from all PO files will be
cumulated.</description>
  </entry-point><entry-point binary-name="msgconv" command="msgconv">
    <needs-terminal/>
    <summary xml:lang="en">Converts a translation catalog to a different character encoding.</summary>
  </entry-point><entry-point binary-name="msgen" command="msgen">
    <needs-terminal/>
    <summary xml:lang="en">Creates an English translation catalog.  </summary>
    <description xml:lang="en">The input file is the last created English PO file, or a PO Template file (generally created by
xgettext).  Untranslated entries are assigned a translation that is
identical to the msgid.</description>
  </entry-point><entry-point binary-name="msgexec" command="msgexec">
    <needs-terminal/>
    <summary xml:lang="en">Applies a command to all translations of a translation catalog.</summary>
    <description xml:lang="en">The COMMAND can be any program that reads a translation from standard
input.  It is invoked once for each translation.  Its output becomes
msgexec's output.  msgexec's return code is the maximum return code
across all invocations.</description>
  </entry-point><entry-point binary-name="msgfilter" command="msgfilter">
    <needs-terminal/>
    <summary xml:lang="en">edit translations of message catalog</summary>
    <description xml:lang="en">Applies a filter to all translations of a translation catalog.</description>
  </entry-point><entry-point binary-name="msgfmt" command="msgfmt">
    <needs-terminal/>
    <summary xml:lang="en">Generate binary message catalog from textual translation description.</summary>
  </entry-point><entry-point binary-name="msggrep" command="msggrep">
    <needs-terminal/>
    <summary xml:lang="en">Extracts all messages of a translation catalog that match a given pattern</summary>
  </entry-point><entry-point binary-name="msginit" command="msginit">
    <needs-terminal/>
    <summary xml:lang="en">Creates a new PO file, initializing the meta information with values from the</summary>
  </entry-point><entry-point binary-name="msgmerge" command="msgmerge">
    <needs-terminal/>
    <summary xml:lang="en">Merges two Uniforum style .po files together.</summary>
    <description xml:lang="en">The def.po file is an
existing PO file with translations which will be taken over to the newly
created file as long as they still match; comments will be preserved,
but extracted comments and file positions will be discarded.  The ref.pot
file is the last created PO file with up-to-date source references but
old translations, or a PO Template file (generally created by xgettext);
any translations or comments in the file will be discarded, however dot
comments and file positions will be preserved.  Where an exact match
cannot be found, fuzzy matching is used to produce better results.</description>
  </entry-point><entry-point binary-name="msgunfmt" command="msgunfmt">
    <needs-terminal/>
    <summary xml:lang="en">Convert binary message catalog to Uniforum style .po file.</summary>
  </entry-point><entry-point binary-name="msguniq" command="msguniq">
    <needs-terminal/>
    <summary xml:lang="en">Unifies duplicate translations in a translation catalog.</summary>
    <description xml:lang="en">Finds duplicate translations of the same message ID.  Such duplicates are
invalid input for other programs like msgfmt, msgmerge or msgcat.  By
default, duplicates are merged together.  When using the --repeated option,
only duplicates are output, and all other messages are discarded.  Comments
and extracted comments will be cumulated, except that if --use-first is
specified, they will be taken from the first translation.  File positions
will be cumulated.  When using the --unique option, duplicates are discarded.</description>
  </entry-point><entry-point binary-name="ngettext" command="ngettext">
    <needs-terminal/>
    <summary xml:lang="en">translate message and choose plural form</summary>
    <description xml:lang="en">The  ngettext program translates a natural language mes-
       sage into the user's language, by looking up the  trans-
       lation in a message catalog, and chooses the appropriate
       plural form, which depends on the number COUNT  and  the
       language  of  the  message catalog where the translation
       was found.</description>
  </entry-point><entry-point binary-name="urlget" command="urlget">
    <needs-terminal/>
    <summary xml:lang="en">Fetches and outputs the contents of an URL.</summary>
    <description xml:lang="en">If the URL cannot be accessed,
the locally accessible FILE is used instead.</description>
  </entry-point><entry-point binary-name="xgettext" command="xgettext">
    <needs-terminal/>
    <summary xml:lang="en">extract gettext strings from source</summary>
    <description xml:lang="en"> Extract translatable strings from given input files.</description>
  </entry-point><entry-point binary-name="msginit" command="msginit">
    <needs-terminal/>
    <summary xml:lang="en">initialize a message catalog</summary>
    <description xml:lang="en">Creates a new PO file, initializing the meta information with values from the
user's environment.</description>
  </entry-point><entry-point binary-name="msgen" command="msgen">
    <needs-terminal/>
    <summary xml:lang="en">create English message catalog</summary>
    <description xml:lang="en">Creates an English translation catalog.  The input file is the last
created English PO file, or a PO Template file (generally created by
xgettext).  Untranslated entries are assigned a translation that is
identical to the msgid.</description>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/git-ssh.xml"><name>Git SSH</name><summary>virtual feed for user-specified SSH implementation to be used by Git</summary><description>This virtual feed allows users to register a custom SSH implemention to be used by Git.

  For example to use PuTTY plink: 0install add-feed https://apps.0install.net/devel/git-ssh.xml https://apps.0install.net/gui/putty.xml</description></interface><interface uri="https://apps.0install.net/devel/git-for-windows.xml"><name>Git for Windows</name><summary>decentralized version control system</summary><description>Git is a powerful version control system aiming to be the fastest decentralized source code management tool on this planet.</description><category>Development</category><homepage>https://gitforwindows.org/</homepage><icon href="https://gitforwindows.org/img/gwindows_logo.png" type="image/png"/><entry-point binary-name="git" command="run">
    <needs-terminal/>
    <name>Git</name>
    <summary>command-line interface for Git</summary>
  </entry-point><entry-point binary-name="git-gui" command="run-gui">
    <name>Git GUI</name>
    <summary>graphical interface for creating Git commits</summary>
  </entry-point><entry-point binary-name="gitk" command="gitk">
    <name>Gitk GUI</name>
    <summary>graphical interface for editing Git commits</summary>
  </entry-point><entry-point command="git-bash">
    <name>Git Bash</name>
    <summary>MSYS-based bash prompt with all Git commands in PATH</summary>
  </entry-point><entry-point command="git-cmd">
    <needs-terminal/>
    <name>Git CMD</name>
    <summary>Windows CMD-based command prompt with all Git commands in PATH</summary>
  </entry-point><entry-point command="ssh">
    <needs-terminal/>
    <name>SSH</name>
    <summary>Secure remote shell</summary>
  </entry-point><entry-point command="scp">
    <needs-terminal/>
    <name>scp</name>
    <summary>Secure remote file copy</summary>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/gitversion.xml"><name>GitVersion</name><summary>versioning when using git, solved</summary><description>Versioning when using git, solved. GitVersion looks at your git history and works out the semantic version of the commit being built.</description><category>Development</category><homepage>https://github.com/GitTools/GitVersion</homepage><entry-point binary-name="GitVersion" command="run"/></interface><interface uri="https://apps.0install.net/devel/glade.xml"><name>Glade</name><summary>a User Interface Designer</summary><description>
Glade is a RAD tool to enable quick &amp; easy development of user interfaces for
the GTK+ toolkit and the GNOME desktop environment.

The user interfaces designed in Glade are saved as XML, and by using the
GtkBuilder GTK+ object these can be loaded by applications dynamically as
needed.

By using GtkBuilder, Glade XML files can be used in numerous programming
languages including C, C++, C#, Vala, Java, Perl, Python,and others.</description><homepage>https://glade.gnome.org/</homepage><category>Development</category></interface><interface uri="https://apps.0install.net/devel/gcloud.xml"><name>Google Cloud SDK</name><summary>set of tools for Google Cloud Platform</summary><description>The Google Cloud SDK is a set of tools for the Google Cloud Platform. It contains gcloud, gsutil, and bq, which you can use to access Google Compute Engine, Google Cloud Storage, Google BigQuery, and other products and services from the command-line.</description><homepage>https://cloud.google.com/sdk/</homepage><entry-point binary-name="gcloud" command="run">
    <description>command-line tool for Google Cloud</description>
  </entry-point><entry-point binary-name="gsutil" command="gsutil">
    <needs-terminal/>
    <description>command-line tool for Google Cloud Storage</description>
  </entry-point><entry-point binary-name="bq" command="bq">
    <needs-terminal/>
    <description>command-line tool for BigQuery</description>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/packer.xml"><name>Packer</name><summary>build automated machine images</summary><description>Packer is a tool for creating identical machine images for multiple platforms from a single source configuration.</description><homepage>https://www.packer.io/</homepage><entry-point binary-name="packer" command="run"/></interface><interface uri="https://apps.0install.net/devel/patch.xml"><name>Patch</name><summary xml:lang="en">Patch: apply a diff file to an original</summary><description xml:lang="en">`patch' takes a patch file containing a difference listing produced by diff and applies those differences to one or more original files, producing patched versions. </description><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.png" type="image/png"/><category>Development</category><homepage>http://gnuwin32.sourceforge.net/packages/patch.htm</homepage><entry-point binary-name="patch" command="run">
    <needs-terminal/>
  </entry-point></interface><interface uri="https://apps.0install.net/devel/terraform.xml"><name>Terraform</name><summary>write, plan, and create infrastructure as code</summary><description>Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.</description><homepage>https://www.terraform.io/</homepage><entry-point binary-name="terraform" command="run"/></interface><interface uri="https://apps.0install.net/devel/vagrant.xml"><name>Vagrant</name><summary>tool for building and distributing development environments</summary><description>Development environments managed by Vagrant can run on local virtualized platforms such as VirtualBox or VMware, in the cloud via AWS or OpenStack, or in containers such as with Docker or raw LXC.</description><homepage>https://www.vagrantup.com/</homepage><entry-point binary-name="vagrant" command="run"/></interface><interface uri="https://apps.0install.net/devel/cloc.xml"><name>cloc</name><summary>count lines of code</summary><description>cloc counts blank lines, comment lines, and physical lines of source code in many programming languages..</description><homepage>https://github.com/AlDanial/cloc</homepage><entry-point binary-name="cloc" command="run"/></interface><interface uri="https://apps.0install.net/devel/gcc-c.xml"><name>gcc-c</name><summary>gcc C compiler</summary><description/><homepage>https://gcc.gnu.org/</homepage></interface><interface uri="https://apps.0install.net/devel/gcc-c++.xml"><name>gcc-c++</name><summary>gcc C++ compiler</summary><description/><homepage>https://gcc.gnu.org/</homepage></interface><interface uri="https://apps.0install.net/devel/git.xml"><name>git-core</name><summary>fast, scalable, distributed revision control system</summary><description>
Git is popular version control system designed to handle very large projects
with speed and efficiency; it is used mainly for various open source projects,
most notably the Linux kernel.

Git falls in the category of distributed source code management tools. Every Git
working directory is a full-fledged repository with full revision tracking
capabilities, not dependent on network access or a central server.

This package provides the git main components with minimal dependencies.
Additional functionality, e.g. a graphical user interface and revision tree
visualizer, tools for interoperating with other VCS's, or a web interface, is
provided as separate git* packages.</description><category>Development</category></interface><interface uri="https://apps.0install.net/devel/libintl.xml"><name>libintl</name><summary xml:lang="en">library for native language support</summary><description xml:lang="en">Libintl is a library that provides native language support to programs. It is part of Gettext. </description><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.png" type="image/png"/><category>Development</category><homepage>http://gnuwin32.sourceforge.net/packages/libintl.htm</homepage></interface><interface uri="https://apps.0install.net/devel/make.xml"><name>make</name><summary>The GNU version of the &quot;make&quot; utility.</summary><description>
GNU Make is a program that determines which pieces of a large program need to be
recompiled and issues the commands to recompile them, when necessary.

The upstream sources for this package are available at the location
ftp://ftp.gnu.org/gnu/make/. The documentation for this package does not meet
the Debian Free Software Guidelines, and has been removed from this package.</description><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.ico" type="image/vnd.microsoft.icon"/><icon href="https://raw.githubusercontent.com/0install/apps/master/utils/gnu.png" type="image/png"/><category>Development</category><homepage>http://www.gnu.org/software/make/</homepage><entry-point binary-name="make" command="run"/></interface><interface uri="https://apps.0install.net/devel/make-dep.xml"><name>make dependencies</name><summary>libraries for make</summary></interface><interface uri="https://apps.0install.net/devel/pkg-config.xml"><name>pkg-config</name><summary>manage compile and link flags for libraries</summary><description>
pkg-config is a system for managing library compile and link flags that works
with automake and autoconf.

Increasingly libraries ship with &quot;.pc&quot; files that allow querying of the compiler
and linker flags needed to use them through the pkg-config(1) program.</description><category>Development</category><homepage>http://pkg-config.freedesktop.org/</homepage></interface><interface uri="https://apps.0install.net/devel/protoc.xml"><name>protoc</name><summary>compiler/generator for Protocol Buffers (protobuf)</summary><description>Generates source code in various languages (e.g. C++, Java, Python, C#) from protobuf files (.proto).</description><homepage>https://developers.google.com/protocol-buffers/</homepage><entry-point binary-name="protoc" command="run"/></interface></c:catalog>
<!-- Base64 Signature
iQEzBAABCgAdFiEEiMih83WShpHXNlwCWao5J8JOTh4FAl6UsB0ACgkQWao5J8JOTh5AzAf9GrTt
nZFo3Bm5RpA1YRw62D4kl7OOPHn9iKfHb0Wjao/UEjE/M2ty53St/YvmBEM5mOgWnfy7r/W8mAwV
5WbYMMqGn1PJqRPV4ZiuLUeoX6r8/Ut5AasEz03k+7DuZaRq8VJDTbRfHs0Ged5MTXOWCheX6Ww1
+OORn8C0gAjIiFTWO5eub6X2EmU0DFnofzOp9+yfWP1oucJ9vUNMhgKTBKO4RKLlYCzdSt+HF6Wr
6+AdhMcXR+Z4xOxPRi34kj3q6xRRX1e2wb4oAGykOJ86bGWn9YrSOxAaLHyqXvXOH6kMzwTe/Ngl
7t38o8UXQCwxyXoWe2rAy9bOM1wW6ckU6Q==

-->
